@page "/"

@using MataoMaps
@using MataoMaps.Domain.DTOs.Usuario.Request
@using MataoMaps.Domain.DTOs.Usuario.Response
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt

<RadzenNotification />

<RadzenRow Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10 rz-my-12" Style="width: 100%; max-width: 800px; overflow: hidden;">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-text-align-center rz-p-12" Style="height: 100%; background-image: linear-gradient(45deg, #768198, #bec6d8)">
            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-white rz-mb-6">Bem Vindo(a)!</RadzenText>
            <RadzenText TextStyle="TextStyle.H6" Class="rz-color-white">Logue-se para prosseguir.</RadzenText>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-p-12">
            <RadzenTemplateForm TItem="UsuarioAutenticarRequest" Data="@usuarioAutenticarRequest" Submit="@Autenticar">
                <RadzenRow AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap" Gap="1rem">
                    <RadzenColumn>
                        <h1>Login</h1>
                        <p>Não tem uma conta? <RadzenLink Path="usuario/create" Text="Cadastre-se aqui." Style="color: red; font-weight: bold;" /></p>

                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                            <RadzenFormField Text="E-mail institucional" Style="width: 100%;">
                                <RadzenTextBox Style="width: 100%;" @bind-Value="usuarioAutenticarRequest.EmailLogin" Name="EmailLogin" />
                            </RadzenFormField>
                            <RadzenRequiredValidator Component="EmailLogin" Text="Email é Obrigatório" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                            <RadzenFormField Text="Senha" Style="width: 100%;">
                                <RadzenPassword @bind-Value="usuarioAutenticarRequest.Senha" Name="Senha" />
                            </RadzenFormField>
                            <RadzenRequiredValidator Component="Senha" Text="Senha é Obrigatória" />
                        </RadzenColumn>

                        <RadzenFormField Variant="Variant.Text" Style="width: 100%;">
                            <RadzenButton ButtonType="ButtonType.Submit" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Light" Disabled="@isLoading" Click="@(() => Autenticar())">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="visually-hidden">Loading...</span>
                                }
                                else
                                {
                                    <span>Entrar</span>
                                }
                            </RadzenButton>
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenTemplateForm>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    private bool isLoading = false;

    UsuarioAutenticarRequest usuarioAutenticarRequest = new UsuarioAutenticarRequest();

    protected override async Task OnInitializedAsync()
    {
        ZerarToken();
        isLoading = false;
    }

    public async void ZerarToken()
    {
        // await JSRuntime.InvokeVoidAsync("SessionStorage.removeItem", "isLogged");
        await SessionStorage.SetItemAsync("isLogged", "N");
    }


    private async void Autenticar()
    {
        if (string.IsNullOrEmpty(usuarioAutenticarRequest.EmailLogin) || string.IsNullOrEmpty(usuarioAutenticarRequest.Senha))
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = "Por favor, preencha todos os campos.",
                    Duration = 4000
                });
            return;
        }

        isLoading = true;

        var response = await HttpClient.PostAsJsonAsync("autenticar", usuarioAutenticarRequest);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var usuarioAutenticarResponse = JsonSerializer.Deserialize<UsuarioAutenticarResponse>(content, options);

            //Salvando se é EhAdmin
            var handler = new JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(usuarioAutenticarResponse.AccessToken);
            await SessionStorage.SetItemAsync("ehAdmin", token.Claims.First(claim => claim.Type == "EhAdmin").Value);
            await SessionStorage.SetItemAsync("isLogged", "S");

            UsuarioLogado.EhAdmin = token.Claims.First(claim => claim.Type == "EhAdmin").Value;
            UsuarioLogado.IsLogged = "S";

            AuthService.TriggerLoggedIn();

            HttpClient.DefaultRequestHeaders.Clear();
            HttpClient.DefaultRequestHeaders.Add("authorization", $"bearer {usuarioAutenticarResponse.AccessToken}");

            isLoading = false;

            NavigationManager.NavigateTo("/home");
        }
        else
        {
            isLoading = false;
            StateHasChanged();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = "Usuário ou senha inválidos.",
                    Duration = 4000
                });
        }
    }
}