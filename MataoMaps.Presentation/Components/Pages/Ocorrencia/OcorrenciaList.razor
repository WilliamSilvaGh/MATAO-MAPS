@page "/ocorrencia/list"
@using MataoMaps.Domain.DTOs.Ocorrencia.Response
@using MataoMaps.Domain.DTOs.Ocorrencia.Request

<div class="container">
    <h3>Lista de Ocorrências</h3>
    <div class="d-flex justify-content-center justify-content-sm-end">
        <button class="btn-nao-resolvidas @unresolvedButtonClass" @onclick="ShowUnresolved">
            <i class="fas fa-exclamation-circle"></i>
        </button>
        <button class="btn-resolvidas @resolvedButtonClass" @onclick="ShowResolved">
            <i class="fas fa-check-circle"></i>
        </button>

        @if (UsuarioLogadoService.EhAdmin)
        {
            <button class="btn-relatorio" @onclick="ShowRelatorioModal">
                <i class="fas fa-file-pdf"></i>
            </button>
        }

    </div>

    <div class="btn-open-filter">
        <button @onclick="ToggleFiltro" class="open-filter">
            <i class="fa-solid fa-filter"></i>
        </button>
    </div>


    @if (modalFiltro)
    {
        <div class="align-date">
            <div class="d-flex justify-content-center justify-content-sm-end">
                <div class="container-filter">
                    <!-- Dia -->
                    <RadzenDropDown @bind-Value="selectedDay"
                                    Data="@availableDays"
                                    Style="width: 100%; max-width: 60px; margin-right: 5px;"
                                    Placeholder="Selecione o Dia">
                    </RadzenDropDown>

                    <!-- Mês -->
                    <RadzenDropDown @bind-Value="selectedMonth"
                                    Data="@availableMonths"
                                    TextProperty="MonthName"
                                    ValueProperty="MonthNumber"
                                    Style="width: 100%; max-width: 110px; margin-right: 5px;"
                                    Placeholder="Selecione o Mês">
                    </RadzenDropDown>

                    <!-- Ano -->
                    <RadzenDropDown @bind-Value="selectedYear"
                                    Data="@availableYears"
                                    Style="width: 100%; max-width: 90px;"
                                    Placeholder="Selecione o Ano">
                    </RadzenDropDown>

                    <!-- Botão para aplicar o filtro -->
                    <div class="btn-filter">
                        <button @onclick="RemoveFilters" class="remove-filter @removeButtonClass" style="margin-right: 10px;">
                            <i class="fa-solid fa-filter-circle-xmark"></i>
                        </button>
                        <button @onclick="ApplyFilters" class="apply-filter @applyButtonClass">
                            <i class="fa-solid fa-filter"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isRelatorioModalOpen)
    {
        <div class="modal-overlay" @onclick="CloseRelatorioModal">
            <div class="modal-content" @onclick:stopPropagation>
                <button class="btn-close-modal" @onclick="CloseRelatorioModal">
                    <i class="fas fa-times"></i>
                </button>
                <h4 style="color: black;">Gerar Relatório PDF</h4>
                <div class="form-group">
                    <label for="startDate">Data Inicial:</label>
                    <RadzenDatePicker AllowInput="false" AllowClear="true" @bind-Value="@startDate" DateFormat="dd/MM/yyyy" Name="Data" class="w-100" />
                </div>
                <br />
                <div class="form-group">
                    <label for="endDate">Data Final:</label>
                    <RadzenDatePicker AllowInput="false" AllowClear="true" @bind-Value="@endDate" DateFormat="dd/MM/yyyy" Name="Data" class="w-100" />
                </div>
                <button class="btn-submit" @onclick="GerarRelatorio">
                    @if (isLoading)
                    {

                        <span class="spinner-border spinner-border-sm text-center" role="status" aria-hidden="true"></span>
                        <span class="visually-hidden">Loading...</span>
                    }
                    else
                    {
                        <span>Gerar Relatório</span>
                    }
                </button>
                <p style="@msgRelatorioClass">@msgRelatorio</p>
            </div>
        </div>
    }

    <div class="ocorrencias-list">

        @if (ocorrencias == null)
        {
            <div style="color: black;" class="d-flex align-items-center">
                <span class="spinner-border spinner-border-sm text-center" role="status" aria-hidden="true"></span>
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else if (ocorrencias.Any())
        {
            foreach (var ocorrencia in ocorrencias)
            {
                <div class="ocorrencia-card" @onclick="() => OpenModal(ocorrencia)">
                    <img src="@($"data:image/png;base64,{ocorrencia.FotoBase64}")" alt="Foto da Ocorrência" class="ocorrencia-img" />
                    <div class="ocorrencia-details">
                        <h4>@ocorrencia.Descricao</h4>
                        <p><strong>Endereço:</strong> @ocorrencia.Endereco</p>
                        <p><strong>Usuário:</strong> @ocorrencia.UsuarioNome</p>
                        <p><strong>Status:</strong> @ocorrencia.Status</p>
                        @if (ocorrencia.Status.ToString() == "Concluido")
                        {
                            <p><strong>Data de Resolução:</strong> @ocorrencia.DataResolucao</p>
                        }
                        @if (ocorrencia.Resolucao == null)
                        {
                            <p><strong>Resolução:</strong> Aguarde... Iremos resolver isso para você o quanto antes! </p>
                        }
                        else
                        {
                            <p><strong>Resolução:</strong> @ocorrencia.Resolucao</p>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p style="color: black;">Nenhuma ocorrência encontrada.</p>
        }
    </div>

    @if (totalPages > 0)
    {
        <div class="pagination">
            <button @onclick="PreviousPage" disabled="@(currentPage == 1)">
                <i class="fas fa-chevron-left"></i>
            </button>
            <div class="page-number">
                <input type="text" value="@currentPage"
                       @onchange="HandlePageChange"
                       style="width: 2rem; margin: 0; border: solid 1px black; outline: none; text-align: center; border-radius: 5px;" />
                <span style="color:black;">/ @(totalPages > 0 ? totalPages.ToString() : "0")</span>
            </div>
            <button @onclick="NextPage" disabled="@(currentPage == totalPages)">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    }

</div>

@if (isModalOpen)
{
    <div class="modal-overlay" @onclick="CloseModal" @onkeydown="HandleKeyDown" tabindex="-1" @ref="modalRef">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="btn-close-modal" @onclick="CloseModal">
                <i class="fas fa-times"></i>
            </button>

            <!-- Contêiner de paginação centralizado -->
            @if (selectedOcorrencia?.Status.ToString() == "Concluido")
            {
                <div class="pagination-imagem">
                    <!-- Botão de "Previous" à esquerda -->
                    <button class="btn-previous" @onclick="ShowPreviousImage" disabled="@(!CanNavigate)">
                        <i class="fas fa-chevron-left"></i>
                    </button>

                    <!-- Botão de "Next" à direita -->
                    <button class="btn-next" @onclick="ShowNextImage" disabled="@(!CanNavigate)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            }
            @if (currentImageIndex == 0)
            {
                <h4>@selectedOcorrencia?.Descricao</h4>
            }
            else
            {
                <h4>@selectedOcorrencia?.Resolucao</h4>
            }

            <div class="carrossel-ocorrencias">
                <!-- Imagem do problema -->
                <img src="@($"data:image/png;base64,{selectedOcorrencia?.FotoBase64}")"
                     class="modal-image @(currentImageIndex == 0 ? "visible" : "hidden") @(arrowPositionClass)" />

                <!-- Imagem da resolução (caso exista) -->
                @if (selectedOcorrencia?.Status.ToString() == "Concluido")
                {
                    <img src="@($"data:image/png;base64,{selectedOcorrencia?.FotoResolucao}")"
                         class="modal-image @(currentImageIndex == 1 ? "visible" : "hidden") @(arrowPositionClass)" />
                }
            </div>

            @if (UsuarioLogadoService.EhAdmin && selectedOcorrencia?.Resolucao == null)
            {
                <label for="startDate">Data da Resolução:</label>
                <RadzenDatePicker AllowInput="false" AllowClear="true" @bind-Value="@dataResolucao" DateFormat="dd/MM/yyyy" Name="Data" class="w-100" />
                <br />
                <label for="startDate">Foto da Resolução:</label>
                <div class="input-image" @onclick="DisplayAction">
                    <i class="fa-solid fa-upload"></i>
                    @if (isImageUploaded)
                    {
                        <p class="success-message text-center">Imagem carregada com sucesso!</p>
                    }
                    else
                    {
                        <p class="text-center">Faça o upload da imagem</p>
                    }
                </div>

                <textarea @bind="@resolution" placeholder="Digite a resolução aqui..."></textarea>
                <button class="btn-submit" @onclick="SubmitResolution">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm text-center" role="status" aria-hidden="true"></span>
                        <span class="visually-hidden">Loading...</span>
                    }
                    else
                    {
                        <span>Enviar Resolução</span>
                    }
                </button>
            }
            else
            {
                if (selectedOcorrencia?.Resolucao != null)
                {
                    <p style="color: black;"><strong>Data da Resolução:</strong> @selectedOcorrencia?.DataResolucao</p>
                    <p style="color: black;"><strong>Resolução:</strong> @selectedOcorrencia?.Resolucao</p>
                }
                else
                {
                    <p style="color: black;"><strong>Resolução:</strong> Aguarde... Iremos resolver isso para você o quanto antes!</p>
                }
            }
        </div>
    </div>
}

<RadzenNotification />

<style>

    .align-date {
        max-width: 1200px;
        margin: 0 auto;
    }

    .btn-open-filter {
        display: flex;
        justify-content: end;
        margin-bottom: 5px;
    }

    .open-filter {
        background-color: #3685cd;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        color: white;
    }

    .container-filter {
        padding: 2rem;
        border-radius: 8px;
        background-color: #f0f4f8;
        z-index: 1;
        position: absolute;
        -webkit-box-shadow: 1px 10px 65px -24px rgba(0,0,0,0.75);
        -moz-box-shadow: 1px 10px 65px -24px rgba(0,0,0,0.75);
        box-shadow: 1px 10px 65px -24px rgba(0,0,0,0.75);
    }

    .btn-filter {
        display: flex;
        justify-content: end;
        flex-wrap: wrap;
        margin-top: 2rem;
    }

        .btn-filter button {
            background-color: #63abff;
            border: none;
            border-radius: 8px;
            color: white;
            padding: 0.5rem 1rem;
        }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    h3 {
        text-align: center;
        color: #333;
    }

    .pagination-imagem {
        display: flex; /* Usando flexbox */
        justify-content: space-between; /* Coloca os botões nas extremidades */
        align-items: center; /* Centraliza verticalmente */
        position: absolute; /* Posicionamento absoluto dentro da modal */
        top: 50%; /* Posiciona verticalmente no meio */
        left: 0;
        right: 0;
        transform: translateY(-50%); /* Ajusta para centralizar exatamente no meio */
        width: 100%; /* Largura do contêiner */
        z-index: 10; /* Garante que os botões fiquem acima da imagem */
    }

    .btn-previous, .btn-next {
        background-color: #007BFF;
        color: white;
        border: none;
        padding: 10px 15px;
        font-size: 1rem;
        border-radius: 5px;
        cursor: pointer;
        margin: 10px;
        border-radius: 50%;
        opacity: 0.8;
    }

        .btn-previous:hover, .btn-next:hover {
            background-color: #0056b3; /* Cor de fundo mais escura ao passar o mouse */
        }

    .input-image {
        width: 100%;
        border-radius: 5px;
        border: 1px solid #ccc;
        padding: 1rem;
        display: flex;
        justify-content: center; /* Centraliza o texto no centro */
        align-items: center; /* Alinha o conteúdo verticalmente */
        position: relative; /* Faz com que o ícone tenha um posicionamento absoluto */
        margin-bottom: 0.5rem;
    }

        .input-image i {
            font-size: 1rem; /* Ajuste o tamanho do ícone conforme necessário */
            cursor: pointer;
            position: absolute; /* Permite mover o ícone para a direita */
            right: 10px; /* Coloca o ícone na extremidade direita */
        }

    .success-message {
        color: green;
        text-align: center;
        margin-top: 0.5rem; /* Espaço entre o ícone e a mensagem */
    }

    .text-center {
        text-align: center; /* Centraliza o texto dentro do parágrafo */
        margin: 0; /* Remove a margem adicional que possa interferir */
    }

    .input-image:hover {
        cursor: pointer;
        backdrop-filter: brightness(1.1); /* Efeito de brilho ao passar o mouse */
        background-color: #e8e8e8; /* Cor de fundo mais escura ao passar o mouse */
    }




    .btn-relatorio {
        background-color: #28a745;
        margin-bottom: 1rem;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        margin-left: 1rem;
    }

        .btn-relatorio:hover {
            background-color: #218838;
        }

    .btn-resolvidas, .btn-nao-resolvidas {
        margin-bottom: 1rem;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
    }

    .btn-resolvidas {
        background-color: #007BFF;
        margin-left: 1rem;
    }

    .btn-nao-resolvidas {
        background-color: #007BFF;
    }

        .btn-resolvidas.selected, .btn-nao-resolvidas.selected {
            background-color: #0056b3; /* Cor mais escura quando selecionado */
        }

        .apply-filter.selected, .remove-filter.selected {
            background-color: #0056b3; /* Cor mais escura quando selecionado */
        }

    .ocorrencias-list {
        display: flex;
        flex-wrap: wrap;
        margin-top: 2rem;
        gap: 1rem;
    }

    .ocorrencia-card {
        flex: 1 1 calc(50% - 1rem);
        background-color: #f9f9f9;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        padding: 1rem;
        transition: transform 0.2s;
        cursor: pointer;
    }

        .ocorrencia-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

    .ocorrencia-img {
        width: 100px;
        height: 100px;
        border-radius: 5px;
        margin-right: 1rem;
        object-fit: cover;
    }

    .ocorrencia-details {
        flex-grow: 1;
    }

        .ocorrencia-details h4 {
            margin: 0;
            color: #007BFF;
        }

        .ocorrencia-details p {
            margin: 0.5rem 0;
            color: #555;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        position: relative;
        max-width: 600px;
        width: 100%;
        color: black;
        margin: 5;
    }

    .carrossel-ocorrencias {
        display: flex;
        position: relative;
    }

    .modal-image {
        width: 100%;
        max-width: 600px;
        max-height: 40vh;
        height: auto;
        border-radius: 5px;
        margin-bottom: 1rem;
        object-fit: scale-down;
        transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    }

        .modal-image.hidden {
            visibility: hidden;
            position: absolute;
            opacity: 0;
        }

            /* Imagem que vai da direita */
            .modal-image.hidden.right {
                visibility: hidden;
                position: absolute;
                opacity: 0;
                transform: translateX(30%); /* A imagem começa fora da tela à direita */
            }

        .modal-image.visible.right {
            visibility: visible;
            position: relative;
            opacity: 1;
            transform: translateX(0); /* A imagem se move para a posição original */
        }

        /* Imagem que vai da esquerda */
        .modal-image.hidden.left {
            visibility: hidden;
            position: absolute;
            opacity: 0;
            transform: translateX(-30%); /* A imagem começa fora da tela à esquerda */
        }

        .modal-image.visible.left {
            visibility: visible;
            position: relative;
            opacity: 1;
            transform: translateX(0); /* A imagem se move para a posição original */
        }

    .btn-close-modal {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .btn-close-modal:hover {
            background-color: #0056b3;
        }

    textarea {
        width: 100%;
        height: 100px;
        border-radius: 5px;
        border: 1px solid #ccc;
        padding: 0.5rem;
        margin-bottom: 1rem;
    }

    .btn-submit {
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        margin-top: 1rem;
    }

        .btn-submit:hover {
            background-color: #0056b3;
        }

    @@media (max-width: 600px) {
        .ocorrencia-card {
            flex: 1 1 100%;
        }
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

        .pagination button {
            margin: 0 10px;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            background-color: #007BFF;
            color: white;
            cursor: pointer;
        }

            .pagination button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }

        .pagination input {
            border: none; /* Remove a borda */
            outline: none; /* Remove o contorno */
            text-align: center; /* Centraliza o texto */
        }
</style>

@code {
    private List<OcorrenciaListarResponse> ocorrencias;
    private List<OcorrenciaListarResponse> todasOcorrencias;
    private bool isModalOpen = false;
    private bool isLoading = false;
    private OcorrenciaListarResponse selectedOcorrencia;
    private string resolution;
    private DateOnly dataResolucao = DateOnly.FromDateTime(DateTime.Now);
    private bool isRelatorioModalOpen = false;

    private OcorrenciaEncerrarRequest ocorrenciaEncerrarRequest = new OcorrenciaEncerrarRequest();

    private bool isImageUploaded = false;
    private string ocorrenciaAdmFoto = "";
    private string _ImageBase64Data;

    private int currentImageIndex = 0; // 0 = Foto do Problema, 1 = Foto da Resolução
    private string arrowPositionClass = "";
    private ElementReference modalRef;
    private bool shouldFocusModal;

    // Indica se as setas de navegação devem estar habilitadas
    private bool CanNavigate => selectedOcorrencia?.Status.ToString() == "Concluido";

    private DateOnly startDate = DateOnly.FromDateTime(DateTime.Now.AddMonths(-1)); // Definir um valor padrão
    private DateOnly endDate = DateOnly.FromDateTime(DateTime.Now);

    private string resolvedButtonClass = "";
    private string unresolvedButtonClass = "";
    private string applyButtonClass = "";
    private string removeButtonClass = "";

    private bool isFilteringResolved = false; // Para controlar o estado do filtro

    private int currentPage = 1;
    private int itemsPerPage = 6;
    private int totalItems;
    private int totalPages;

    private MarkupString msgRelatorio = new MarkupString("");
    private string msgRelatorioClass = "";

    private bool modalFiltro = false;

    private List<int> availableYears = new();
    private List<int> availableDays = new();
    private List<MonthItem> availableMonths = new();  // Lista de meses como objetos MonthItem

    private int selectedYear;
    private int selectedMonth;  // Usado como número do mês selecionado
    private int selectedDay;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        selectedYear = DateTime.Now.Year;
        selectedMonth = DateTime.Now.Month;

        availableYears = DateService.GetAvailableYears(2024); // Exemplo de ano inicial
        availableDays = DateService.GetAvailableDays(selectedMonth, selectedYear);

        // Preenche a lista de meses com MonthItem
        availableMonths = DateService.GetMonths();
        selectedDay = DateTime.Now.Day;

        isLoading = true;
        PageTitleService.SetPageTitle("LISTAR OCORRÊNCIAS");
        BackgroundColorService.SetBackgroundColor("#FFFFFF");
        await LoadOcorrencias();
        ShowUnresolved();
        currentImageIndex = 0;
        isLoading = false;
        StateHasChanged();
    }

    // Método que aplica os filtros
    private void ApplyFilters()
    {
        // Começa com todas as ocorrências disponíveis
        var filteredOcorrencias = todasOcorrencias ?? new List<OcorrenciaListarResponse>();

        // Aplica o filtro de status baseado no isFilteringResolved
        if (isFilteringResolved)
        {
            filteredOcorrencias = filteredOcorrencias.Where(o => o.Status.ToString() == "Concluido").ToList();
        }
        else
        {
            filteredOcorrencias = filteredOcorrencias.Where(o => o.Status.ToString() != "Concluido").ToList();
        }

        // Aplica o filtro de data se valores válidos forem selecionados
        filteredOcorrencias = filteredOcorrencias.Where(o =>
            o.Data.Day == selectedDay &&
            o.Data.Month == selectedMonth &&
            o.Data.Year == selectedYear).ToList();

        // Atualiza a lista de ocorrências filtradas
        ocorrencias = filteredOcorrencias;

        // Atualiza as ocorrências filtradas e aplica paginação
        totalItems = filteredOcorrencias.Count;
        totalPages = totalItems > 0 ? (int)Math.Ceiling(totalItems / (double)itemsPerPage) : 0;

        currentPage = 1; // Sempre começa na primeira página após aplicar os filtros
        ocorrencias = filteredOcorrencias.Skip((currentPage - 1) * itemsPerPage)
                                          .Take(itemsPerPage)
                                          .ToList();

        UpdateButtonFilterDateClasses(true);

        // Força a renderização da UI
        StateHasChanged();
    }


    public void RemoveFilters()
    {
        // Restaura a lista de ocorrências para a lista completa
        ocorrencias = todasOcorrencias?.ToList() ?? new List<OcorrenciaListarResponse>();

        // Reseta os valores selecionados dos filtros
        selectedDay = DateTime.Now.Day;
        selectedMonth = DateTime.Now.Month;
        selectedYear = DateTime.Now.Year;

        // Atualiza os dias disponíveis com base no mês e ano resetados
        UpdateDays();

        UpdateButtonFilterDateClasses(false);

        FilterAndPaginateOcorrencias();

        // Força a renderização da UI
        StateHasChanged();
    }


    private void ToggleFiltro()
    {
        modalFiltro = !modalFiltro; // Alterna o valor de modalFiltro
    }

    private void OnMonthChanged(int month)
    {
        selectedMonth = month;
        UpdateDays();
    }

    private void OnYearChanged(int year)
    {
        selectedYear = year;
        UpdateDays();
    }

    private void UpdateDays()
    {
        availableDays = DateService.GetAvailableDays(selectedMonth, selectedYear);
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocusModal && isModalOpen) // Verifica se o modal está aberto antes de focar
        {
            shouldFocusModal = false;
            await modalRef.FocusAsync();
        }
    }

    private async Task LoadOcorrencias()
    {
        try
        {
            todasOcorrencias = await HttpClient.GetFromJsonAsync<List<OcorrenciaListarResponse>>("/ocorrencia/listar");
            FilterAndPaginateOcorrencias();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro ao carregar ocorrências");
        }
    }

    private async Task ShowPreviousImage()
    {
        if (CanNavigate)
        {
            // Atualiza a direção da animação para a esquerda
            arrowPositionClass = "left";

            // Aguarda o tempo de animação (ajuste conforme necessário)
            await Task.Delay(500); // Aumentando o delay para 1000 ms (1 segundo)

            // Troca a imagem após o delay
            currentImageIndex = currentImageIndex == 0 ? 1 : 0;

            // Força a renderização da UI após a troca de imagem
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShowNextImage()
    {
        if (CanNavigate)
        {
            // Atualiza a direção da animação para a direita
            arrowPositionClass = "right";

            // Aguarda o tempo de animação (ajuste conforme necessário)
            await Task.Delay(500); // Aumentando o delay para 1000 ms (1 segundo)

            // Troca a imagem após o delay
            currentImageIndex = currentImageIndex == 0 ? 1 : 0;

            // Força a renderização da UI após a troca de imagem
            await InvokeAsync(StateHasChanged);
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowLeft")
        {
            ShowPreviousImage();
        }
        else if (e.Key == "ArrowRight")
        {
            ShowNextImage();
        }
    }


    private void FilterAndPaginateOcorrencias()
    {
        // Garantir que todasOcorrencias não seja null
        var filteredOcorrencias = todasOcorrencias ?? new List<OcorrenciaListarResponse>();

        if (isFilteringResolved)
        {
            filteredOcorrencias = filteredOcorrencias.Where(o => o.Status.ToString() == "Concluido").ToList();
        }
        else
        {
            filteredOcorrencias = filteredOcorrencias.Where(o => o.Status.ToString() != "Concluido").ToList();
        }

        totalItems = filteredOcorrencias.Count;
        totalPages = totalItems > 0 ? (int)Math.Ceiling(totalItems / (double)itemsPerPage) : 0;

        ocorrencias = filteredOcorrencias.Skip((currentPage - 1) * itemsPerPage)
                                           .Take(itemsPerPage)
                                           .ToList();
    }

    private void OpenModal(OcorrenciaListarResponse ocorrencia)
    {
        selectedOcorrencia = ocorrencia;
        isModalOpen = true;
        resolution = "";

        shouldFocusModal = true;

        // Garante que o componente será renderizado novamente
        StateHasChanged();
    }

    private void CloseModal()
    {
        isModalOpen = false;
        selectedOcorrencia = null;
    }

    private async void DisplayAction()
    {
        string response = await App.Current.MainPage.DisplayActionSheet("Escolha uma opção", "OK", null, "Tirar foto", "Escolher da galeria");

        if (response == "Tirar foto")
        {
            if (MediaPicker.Default.IsCaptureSupported)
            {
                var photo = await MediaPicker.Default.CapturePhotoAsync();
                if (photo != null)
                {
                    await ProcessPhoto(photo);
                }
            }
        }
        else if (response == "Escolher da galeria")
        {
            var photo = await MediaPicker.Default.PickPhotoAsync();
            if (photo != null)
            {
                await ProcessPhoto(photo);
            }
        }
    }

    private async Task ProcessPhoto(FileResult photo)
    {
        // Obter o tipo MIME da imagem
        string mimeType = photo.ContentType; // Ex: "image/jpeg", "image/png", etc.

        // Definir formatos suportados
        var supportedTypes = new[] { "image/jpeg", "image/png", "image/gif" };

        // Validar se o tipo MIME é suportado
        if (!supportedTypes.Contains(mimeType))
        {
            // Notificar o usuário sobre o tipo não suportado
            NotificationService.Notify(NotificationSeverity.Error, "Tipo de imagem não suportado. Por favor, escolha uma foto JPEG, PNG ou GIF.");
            return; // Saia da função se o tipo não for suportado
        }

        byte[] imageBytes;
        var stream = await photo.OpenReadAsync();

        using (MemoryStream ms = new MemoryStream())
        {
            await stream.CopyToAsync(ms);
            imageBytes = ms.ToArray();
        }

        // Log do tamanho da imagem original
        Console.WriteLine($"Tamanho da imagem original: {imageBytes.Length} bytes");

        _ImageBase64Data = Convert.ToBase64String(imageBytes);
        ocorrenciaEncerrarRequest.FotoResolucao = _ImageBase64Data; // Armazene a imagem em base64 na requisição
        isImageUploaded = true;

        // Defina o prefixo baseado no tipo MIME
        ocorrenciaAdmFoto = $"data:{mimeType};base64,{_ImageBase64Data}";
        this.StateHasChanged();
    }

    private async Task SubmitResolution()
    {
        ocorrenciaEncerrarRequest.Id = selectedOcorrencia.Id;
        ocorrenciaEncerrarRequest.DataResolucao = dataResolucao;
        ocorrenciaEncerrarRequest.Resolucao = resolution;

        isLoading = true;
        if (string.IsNullOrWhiteSpace(resolution))
        {
            NotificationService.Notify(NotificationSeverity.Error, "A resolução não pode estar vazia.");
            return;
        }

        var response = await HttpClient.PutAsJsonAsync("/ocorrencia/encerrar", ocorrenciaEncerrarRequest);

        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Ocorrência encerrada com sucesso");
            await LoadOcorrencias();
            CloseModal();
            isLoading = false;
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Falha ao encerrar a ocorrência.");
        }
    }

    private void ShowResolved()
    {
        isFilteringResolved = true; // Atualiza o estado do filtro
        FilterAndPaginateOcorrencias(); // Aplica o filtro e a paginação
        UpdateButtonClasses(true);
        StateHasChanged();
    }

    private void ShowUnresolved()
    {
        currentPage = 1;
        isFilteringResolved = false; // Atualiza o estado do filtro
        FilterAndPaginateOcorrencias(); // Aplica o filtro e a paginação
        UpdateButtonClasses(false);
        StateHasChanged();
    }

    private void UpdateButtonClasses(bool isResolved)
    {
        resolvedButtonClass = isResolved ? "selected" : "";
        unresolvedButtonClass = isResolved ? "" : "selected"; 
    }

    private void UpdateButtonFilterDateClasses(bool isApply)
    {
        applyButtonClass = isApply ? "selected" : "";
        removeButtonClass = isApply ? "" : "selected";
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            FilterAndPaginateOcorrencias();
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            FilterAndPaginateOcorrencias();
            StateHasChanged();
        }
    }

    private void HandlePageChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newPage) && newPage >= 1 && newPage <= totalPages)
        {
            currentPage = newPage;
            FilterAndPaginateOcorrencias();
            StateHasChanged();
        }
    }

    private void ShowRelatorioModal()
    {
        isRelatorioModalOpen = true;
    }

    private void CloseRelatorioModal()
    {
        isRelatorioModalOpen = false;
    }

    private async Task GerarRelatorio()
    {
        try
        {
            isLoading = true;
            // Faz a requisição para gerar o PDF
            var response = await HttpClient.GetAsync($"/ocorrencia/gerar-relatorio-pdf?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}");

            if (response.IsSuccessStatusCode)
            {
                // Lê o conteúdo da resposta como bytes
                var fileBytes = await response.Content.ReadAsByteArrayAsync();

                // Cria uma URL base64 para o arquivo PDF
                var fileUrl = $"data:application/pdf;base64,{Convert.ToBase64String(fileBytes)}";

                // Força o download do PDF usando JSRuntime
                await JSRuntime.InvokeVoidAsync("eval", $"var link = document.createElement('a'); link.href = '{fileUrl}'; link.download = 'Relatorio_Ocorrencias.pdf'; link.click();");
                msgRelatorio = new MarkupString("Relatório gerado com sucesso. <strong>Verifique a pasta de downloads!</strong>");
                msgRelatorioClass = "color: green; text-align: center; margin: 0; margin-top: 5px;";
                isLoading = false;
                NotificationService.Notify(NotificationSeverity.Success, "Relatório gerado com sucesso.");
            }
            else
            {
                isLoading = false;
                msgRelatorio = new MarkupString("Erro ao gerar o relatório.");
                msgRelatorioClass = "color: red; text-align: center; margin: 0; margin-top: 5px;";
                NotificationService.Notify(NotificationSeverity.Error, "Erro ao gerar o relatório.");
            }
        }
        catch (Exception ex)
        {
            msgRelatorio = new MarkupString("Erro ao gerar o relatório.");
            msgRelatorioClass = "color: red; text-align: center; margin: 0; margin-top: 5px;";
            NotificationService.Notify(NotificationSeverity.Error, "Erro ao gerar o relatório.");
        }
    }
}