@page "/ocorrencia/list"
@using MataoMaps.Domain.DTOs.Ocorrencia.Response
@using MataoMaps.Domain.DTOs.Ocorrencia.Request

<div class="container">
    <h3>Lista de Ocorrências</h3>
    <div class="d-flex justify-content-end">
        <button class="btn-nao-resolvidas @unresolvedButtonClass" @onclick="ShowUnresolved">
            <i class="fas fa-exclamation-circle"></i>
        </button>
        <button class="btn-resolvidas @resolvedButtonClass" @onclick="ShowResolved">
            <i class="fas fa-check-circle"></i>
        </button>

        @if (UsuarioLogadoService.EhAdmin)
        {
            <button class="btn-relatorio" @onclick="ShowRelatorioModal">
                <i class="fas fa-file-pdf"></i>
            </button>
        }

    </div>

    @if (isRelatorioModalOpen)
    {
        <div class="modal-overlay" @onclick="CloseRelatorioModal">
            <div class="modal-content" @onclick:stopPropagation>
                <button class="btn-close-modal" @onclick="CloseRelatorioModal">
                    <i class="fas fa-times"></i>
                </button>
                <h4 style="color: black;">Gerar Relatório PDF</h4>
                <div class="form-group">
                    <label for="startDate">Data Inicial:</label>
                    <input type="date" id="startDate" @bind="startDate" class="form-control" />
                </div>
                <br />
                <div class="form-group">
                    <label for="endDate">Data Final:</label>
                    <input type="date" id="endDate" @bind="endDate" class="form-control" />
                </div>
                <button class="btn-submit" @onclick="GerarRelatorio">
                    @if (isLoading)
                    {

                        <span class="spinner-border spinner-border-sm text-center" role="status" aria-hidden="true"></span>
                        <span class="visually-hidden">Loading...</span>
                    }
                    else
                    {
                        <span>Gerar Relatório</span>
                    }
                </button>
            </div>
        </div>
    }

    <div class="ocorrencias-list">

        @if (ocorrencias == null)
        {
            <div style="color: black;" class="d-flex align-items-center">
                <span class="spinner-border spinner-border-sm text-center" role="status" aria-hidden="true"></span>
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else if (ocorrencias.Any())
        {
            foreach (var ocorrencia in ocorrencias)
            {
                <div class="ocorrencia-card" @onclick="() => OpenModal(ocorrencia)">
                    <img src="@($"data:image/png;base64,{ocorrencia.FotoBase64}")" alt="Foto da Ocorrência" class="ocorrencia-img" />
                    <div class="ocorrencia-details">
                        <h4>@ocorrencia.Descricao</h4>
                        <p><strong>Endereço:</strong> @ocorrencia.Endereco</p>
                        <p><strong>Usuário:</strong> @ocorrencia.UsuarioNome</p>
                        <p><strong>Status:</strong> @ocorrencia.Status</p>
                        <p><strong>Resolução:</strong> @ocorrencia.Resolucao</p>
                    </div>
                </div>
            }
        }
        else
        {
            <p style="color: black;">Nenhuma ocorrência encontrada.</p>
        }
    </div>

    @if (totalPages > 0)
    {
        <div class="pagination">
            <button @onclick="PreviousPage" disabled="@(currentPage == 1)">
                <i class="fas fa-chevron-left"></i>
            </button>
            <div class="page-number">
                <input type="text" value="@currentPage"
                       @onchange="HandlePageChange"
                       style="width: 2rem; margin: 0; border: solid 1px black; outline: none; text-align: center; border-radius: 5px;" />
                <span style="color:black;">/ @(totalPages > 0 ? totalPages.ToString() : "0")</span>
            </div>
            <button @onclick="NextPage" disabled="@(currentPage == totalPages)">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    }

</div>

@if (isModalOpen)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="btn-close-modal" @onclick="CloseModal">
                <i class="fas fa-times"></i>
            </button>
            <h4>@selectedOcorrencia?.Descricao</h4>
            <img src="@($"data:image/png;base64,{selectedOcorrencia?.FotoBase64}")" class="modal-image" />
            @if (UsuarioLogadoService.EhAdmin && selectedOcorrencia?.Resolucao == null)
            {
                <textarea @bind="@resolution" placeholder="Digite a resolução aqui..."></textarea>
                <button class="btn-submit" @onclick="SubmitResolution">
                    @if (isLoading)
                    {

                        <span class="spinner-border spinner-border-sm text-center" role="status" aria-hidden="true"></span>
                        <span class="visually-hidden">Loading...</span>
                    }
                    else
                    {
                        <span>Enviar Resolução</span>
                    }
                </button>
            }
            else
            {
                if (selectedOcorrencia?.Resolucao != null)
                {
                    <p style="color: black;"><strong>Resolução:</strong> @selectedOcorrencia?.Resolucao</p>
                }
                else
                {
                    <p style="color: black;"><strong>Resolução:</strong> Aguarde... Iremos resolver isso para você o quanto antes!</p>
                }
            }
        </div>
    </div>
}

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    h3 {
        text-align: center;
        color: #333;
    }

    .btn-relatorio {
        background-color: #28a745;
        margin-bottom: 1rem;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        margin-left: 1rem;
    }

        .btn-relatorio:hover {
            background-color: #218838;
        }

    .btn-resolvidas, .btn-nao-resolvidas {
        margin-bottom: 1rem;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
    }

    .btn-resolvidas {
        background-color: #007BFF;
        margin-left: 1rem;
    }

    .btn-nao-resolvidas {
        background-color: #007BFF;
    }

        .btn-resolvidas.selected, .btn-nao-resolvidas.selected {
            background-color: #0056b3; /* Cor mais escura quando selecionado */
        }

    .ocorrencias-list {
        display: flex;
        flex-wrap: wrap;
        margin-top: 2rem;
        gap: 1rem;
    }

    .ocorrencia-card {
        flex: 1 1 calc(50% - 1rem);
        background-color: #f9f9f9;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        padding: 1rem;
        transition: transform 0.2s;
        cursor: pointer;
    }

        .ocorrencia-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

    .ocorrencia-img {
        width: 100px;
        height: 100px;
        border-radius: 5px;
        margin-right: 1rem;
        object-fit: cover;
    }

    .ocorrencia-details {
        flex-grow: 1;
    }

        .ocorrencia-details h4 {
            margin: 0;
            color: #007BFF;
        }

        .ocorrencia-details p {
            margin: 0.5rem 0;
            color: #555;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        position: relative;
        max-width: 600px;
        width: 100%;
        color: black;
    }

    .modal-image {
        width: 100%;
        border-radius: 5px;
        margin-bottom: 1rem;
    }

    .btn-close-modal {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .btn-close-modal:hover {
            background-color: #0056b3;
        }

    textarea {
        width: 100%;
        height: 100px;
        border-radius: 5px;
        border: 1px solid #ccc;
        padding: 0.5rem;
        margin-bottom: 1rem;
    }

    .btn-submit {
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        margin-top: 1rem;
    }

        .btn-submit:hover {
            background-color: #0056b3;
        }

    @@media (max-width: 600px) {
        .ocorrencia-card {
            flex: 1 1 100%;
        }
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

        .pagination button {
            margin: 0 10px;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            background-color: #007BFF;
            color: white;
            cursor: pointer;
        }

            .pagination button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }

        .pagination input {
            border: none; /* Remove a borda */
            outline: none; /* Remove o contorno */
            text-align: center; /* Centraliza o texto */
        }
</style>

@code {
    private List<OcorrenciaListarResponse> ocorrencias;
    private List<OcorrenciaListarResponse> todasOcorrencias;
    private bool isModalOpen = false;
    private bool isLoading = false;
    private OcorrenciaListarResponse selectedOcorrencia;
    private string resolution;
    private bool isRelatorioModalOpen = false;
    private DateOnly startDate = DateOnly.FromDateTime(DateTime.Now.AddMonths(-1)); // Definir um valor padrão
    private DateOnly endDate = DateOnly.FromDateTime(DateTime.Now);

    private string resolvedButtonClass = "";
    private string unresolvedButtonClass = "";

    private bool isFilteringResolved = false; // Para controlar o estado do filtro

    private int currentPage = 1;
    private int itemsPerPage = 5;
    private int totalItems;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        PageTitleService.SetPageTitle("LISTAR OCORRÊNCIAS");
        BackgroundColorService.SetBackgroundColor("#FFFFFF");

        await LoadOcorrencias();
        ShowUnresolved();
        isLoading = false;
    }

    private async Task LoadOcorrencias()
    {
        try
        {
            todasOcorrencias = await HttpClient.GetFromJsonAsync<List<OcorrenciaListarResponse>>("/ocorrencia/listar");
            FilterAndPaginateOcorrencias();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar ocorrências: {ex.Message}");
        }
    }

    private void FilterAndPaginateOcorrencias()
    {
        // Filtra as ocorrências de acordo com o filtro
        var filteredOcorrencias = todasOcorrencias;

        if (isFilteringResolved)
        {
            filteredOcorrencias = filteredOcorrencias.Where(o => o.Status.ToString() == "Concluido").ToList();
        }
        else
        {
            filteredOcorrencias = filteredOcorrencias.Where(o => o.Status.ToString() != "Concluido").ToList();
        }

        totalItems = filteredOcorrencias.Count;
        totalPages = totalItems > 0 ? (int)Math.Ceiling(totalItems / (double)itemsPerPage) : 0;

        ocorrencias = filteredOcorrencias.Skip((currentPage - 1) * itemsPerPage)
                                           .Take(itemsPerPage)
                                           .ToList();
    }


    private void OpenModal(OcorrenciaListarResponse ocorrencia)
    {
        selectedOcorrencia = ocorrencia;
        isModalOpen = true;
        resolution = "";
    }

    private void CloseModal()
    {
        isModalOpen = false;
        selectedOcorrencia = null;
    }

    private async Task SubmitResolution()
    {
        isLoading = true;
        if (string.IsNullOrWhiteSpace(resolution))
        {
            Console.WriteLine("A resolução não pode estar vazia.");
            return;
        }

        var requestContent = new OcorrenciaEncerrarRequest
            {
                Id = selectedOcorrencia.Id,
                Resolucao = resolution
            };

        var response = await HttpClient.PutAsJsonAsync("/ocorrencia/encerrar", requestContent);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Ocorrência {selectedOcorrencia?.Id} encerrada com sucesso.");
            await LoadOcorrencias();
            CloseModal();
            isLoading = false;
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Falha ao encerrar a ocorrência. Detalhes: {errorMessage}");
        }
    }

    private void ShowResolved()
    {
        isFilteringResolved = true; // Atualiza o estado do filtro
        FilterAndPaginateOcorrencias(); // Aplica o filtro e a paginação
        UpdateButtonClasses(true);
        StateHasChanged();
    }

    private void ShowUnresolved()
    {
        isFilteringResolved = false; // Atualiza o estado do filtro
        FilterAndPaginateOcorrencias(); // Aplica o filtro e a paginação
        UpdateButtonClasses(false);
        StateHasChanged();
    }

    private void UpdateButtonClasses(bool isResolved)
    {
        resolvedButtonClass = isResolved ? "selected" : "";
        unresolvedButtonClass = isResolved ? "" : "selected";
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            FilterAndPaginateOcorrencias();
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            FilterAndPaginateOcorrencias();
            StateHasChanged();
        }
    }

    private void HandlePageChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newPage) && newPage >= 1 && newPage <= totalPages)
        {
            currentPage = newPage;
            FilterAndPaginateOcorrencias();
            StateHasChanged();
        }
    }

    private void ShowRelatorioModal()
    {
        isRelatorioModalOpen = true;
    }

    private void CloseRelatorioModal()
    {
        isRelatorioModalOpen = false;
    }

    private async Task GerarRelatorio()
    {
        try
        {
            isLoading = true;
            // Faz a requisição para gerar o PDF
            var response = await HttpClient.GetAsync($"/ocorrencia/gerar-relatorio-pdf?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}");

            if (response.IsSuccessStatusCode)
            {
                // Lê o conteúdo da resposta como bytes
                var fileBytes = await response.Content.ReadAsByteArrayAsync();

                // Cria uma URL base64 para o arquivo PDF
                var fileUrl = $"data:application/pdf;base64,{Convert.ToBase64String(fileBytes)}";

                // Força o download do PDF usando JSRuntime
                await JSRuntime.InvokeVoidAsync("eval", $"var link = document.createElement('a'); link.href = '{fileUrl}'; link.download = 'Relatorio_Ocorrencias.pdf'; link.click();");
                isLoading = false;
            }
            else
            {
                isLoading = false;
                Console.WriteLine("Erro ao gerar o relatório. Status code: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao gerar o relatório: {ex.Message}");
        }
    }



}
