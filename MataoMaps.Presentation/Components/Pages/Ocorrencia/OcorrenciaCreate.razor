@page "/ocorrencia/create"
@using MataoMaps.Domain.DTOs.Ocorrencia.Request
@using System.IO

<h3>Adicionar fotos</h3>
<div class="quadrado" @onclick="DisplayAction">
    <img src="./Images/camera.png" class="camera" />

    @if (isImageUploaded)
    {
        <p class="success-message">Imagem carregada com sucesso!</p>
    }

</div>

<input type="text" placeholder="Endereço" class="text-input" @bind="ocorrenciaAdicionarRequest.Endereco" />

<div class="fundo-problema">
    <h4>DESCREVA O PROBLEMA</h4>
    <textarea class="text-area" rows="4" @bind="ocorrenciaAdicionarRequest.Descricao"></textarea>
</div>

<button class="btn-publicar" @onclick="PublicarOcorrencia">
    @if (isLoading)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <span class="visually-hidden">Loading...</span>
    }
    else
    {
        <span>PUBLICAR</span>
    }
</button>


<style>

    .fundo-problema {
        background-color: #f9d857;
        width: 80%;
        margin: 1rem auto; /* Adiciona espaçamento acima e abaixo */
        border-radius: 0.5rem; /* Adiciona bordas arredondadas ao fundo */
        position: relative; /* Permite posicionar elementos relativos a este contêiner */
        height: 5rem; /* Altura do contêiner */
    }

    .text-area {
        width: 100%;
        border: none; /* Remove a borda padrão do textarea */
        border-radius: 0.5rem; /* Arredonda as bordas do textarea para combinar com o fundo */
        height: 10rem; /* Altura do textarea */
        padding: 1rem; /* Espaçamento interno */
        resize: none; /* Impede o redimensionamento do textarea */
        outline: none; /* Remove a borda ao focar */
    }

    h4 {
        color: black;
        font-size: 1rem;
        text-align: center;
        font-weight: 700;
        padding-top: 0.5rem;
    }

    h3 {
        color: black;
        text-align: center; /* Centraliza o título */
        margin-top: 1rem; /* Espaçamento superior */
        margin-bottom: 1rem; /* Espaçamento inferior */
    }

    .text-input {
        display: block; /* Remove o comportamento flexível desnecessário */
        width: 80%; /* Largura do input */
        height: 2rem; /* Altura do input */
        margin: 1rem auto; /* Espaçamento superior e inferior, e centraliza horizontalmente */
        border: none; /* Remove a borda */
        border-radius: 2rem; /* Borda arredondada */
        padding-left: 1rem; /* Espaçamento interno à esquerda */
    }

        .text-input::placeholder {
            color: black;
            font-weight: 500;
        }

    .camera {
        width: 4rem;
        height: 3rem;
        z-index: 0;
        position: absolute;
    }

    .quadrado {
        display: flex;
        justify-content: center; /* Centraliza a imagem horizontalmente dentro do quadrado */
        align-items: center; /* Centraliza a imagem verticalmente dentro do quadrado */
        width: 80%; /* Largura do quadrado */
        height: 10rem; /* Altura do quadrado */
        border: 3px solid black; /* Borda preta */
        background-color: #f8f8f8; /* Cor de fundo opcional */
        margin: 0 auto; /* Centraliza o quadrado */
        position: relative;
    }

        .quadrado:hover {
            cursor: pointer; /* Altera o cursor ao passar o mouse */
            background-color: #e0e0e0; /* Cor de fundo ao passar o mouse */
        }


    .btn-publicar {
        display: block; /* Faz com que o botão se comporte como um bloco, ocupando a largura disponível */
        width: 80%; /* Define a largura do botão */
        margin: 1rem auto; /* Centraliza o botão horizontalmente e adiciona espaçamento acima e abaixo */
        padding: 0.75rem; /* Adiciona espaçamento interno ao botão */
        border: none; /* Remove a borda padrão do botão */
        border-radius: 2rem; /* Borda arredondada para combinar com outros elementos */
        background-color: #3685cd; /* Cor de fundo azul para o botão */
        color: white; /* Cor do texto */
        font-weight: bold; /* Texto em negrito */
        font-size: 1rem; /* Tamanho da fonte */
        text-align: center; /* Centraliza o texto */
        cursor: pointer; /* Altera o cursor para indicar que é clicável */
        transition: background-color 0.3s; /* Adiciona uma transição suave para a mudança de cor */
        z-index: 10; /* Adiciona um z-index para garantir que o botão fique acima de outros elementos */
        position: relative; /* Faz com que o z-index funcione */
        margin-top: 8rem; /* Adiciona um espaçamento superior ao botão */
    }

        .btn-publicar:hover {
            background-color: #0056b3; /* Cor de fundo mais escura ao passar o mouse */
        }


    .success-message {
        color: green; /* Cor da mensagem de sucesso */
        text-align: center; /* Centraliza o texto */
        margin-top: 7.5rem; /* Espaçamento acima da mensagem */
    }
</style>

<RadzenNotificationService />

@code {
    private bool isLoading = false;
    private bool isImageUploaded = false;
    private string ocorrenciaUsuarioFoto = "/Images/camera.png";
    private string _ImageBase64Data;

    protected override void OnInitialized()
    {
        PageTitleService.SetPageTitle("OCORRÊNCIA");
    }

    private OcorrenciaAdicionarRequest ocorrenciaAdicionarRequest = new OcorrenciaAdicionarRequest();

    private async void DisplayAction()
    {
        string response = await App.Current.MainPage.DisplayActionSheet("Escolha uma opção", "OK", null, "Tirar foto", "Escolher da galeria");

        if (response == "Tirar foto")
        {
            if (MediaPicker.Default.IsCaptureSupported)
            {
                var photo = await MediaPicker.Default.CapturePhotoAsync();
                if (photo != null)
                {
                    await ProcessPhoto(photo);
                }
            }
        }
        else if (response == "Escolher da galeria")
        {
            var photo = await MediaPicker.Default.PickPhotoAsync();
            if (photo != null)
            {
                await ProcessPhoto(photo);
            }
        }
    }

    private async Task ProcessPhoto(FileResult photo)
    {
        // Obter o tipo MIME da imagem
        string mimeType = photo.ContentType; // Ex: "image/jpeg", "image/png", etc.

        // Definir formatos suportados
        var supportedTypes = new[] { "image/jpeg", "image/png", "image/gif" };

        // Validar se o tipo MIME é suportado
        if (!supportedTypes.Contains(mimeType))
        {
            // Notificar o usuário sobre o tipo não suportado
            NotificationService.Notify(NotificationSeverity.Error, "Tipo de imagem não suportado. Por favor, escolha uma foto JPEG, PNG ou GIF.");
            return; // Saia da função se o tipo não for suportado
        }

        byte[] imageBytes;
        var stream = await photo.OpenReadAsync();

        using (MemoryStream ms = new MemoryStream())
        {
            await stream.CopyToAsync(ms);
            imageBytes = ms.ToArray();
        }

        // Log do tamanho da imagem original
        Console.WriteLine($"Tamanho da imagem original: {imageBytes.Length} bytes");

        _ImageBase64Data = Convert.ToBase64String(imageBytes);
        ocorrenciaAdicionarRequest.FotoBase64 = _ImageBase64Data; // Armazene a imagem em base64 na requisição
        isImageUploaded = true;

        // Defina o prefixo baseado no tipo MIME
        ocorrenciaUsuarioFoto = $"data:{mimeType};base64,{_ImageBase64Data}";
        this.StateHasChanged();
    }

    private async Task PublicarOcorrencia()
    {
        isLoading = true;
        // Aqui você pode ajustar Latitude e Longitude conforme necessário.
        ocorrenciaAdicionarRequest.Latitude = 0; // Adapte conforme necessário
        ocorrenciaAdicionarRequest.Longitude = 0; // Adapte conforme necessário

        var response = await HttpClient.PostAsJsonAsync("/ocorrencia/adicionar", ocorrenciaAdicionarRequest);
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Ocorrência publicada com sucesso!");
            NavigationManager.NavigateTo("/ocorrencia/list");
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro ao publicar ocorrência.");
        }
        isLoading = false;
    }
}
}