@page "/usuario/cadastro"
@using MataoMaps.Domain.DTOs.Usuario.Request
@using System.Text.RegularExpressions

<!-- Formulário de Cadastro -->
<div class="align">
    <EditForm Model="@usuarioAdicionarRequest" OnValidSubmit="@AdicionarUsuario">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <InputText id="Nome" @bind-Value="usuarioAdicionarRequest.Nome" placeholder="Nome Completo" class="text-input" />
        </div>

        <div class="form-group">
            <InputText id="EmailLogin" @bind-Value="usuarioAdicionarRequest.EmailLogin" placeholder="Email" class="text-input" />
        </div>

        <div class="form-group">
            <InputText id="EmailLoginConfirmacao" @bind-Value="usuarioAdicionarRequest.EmailLoginConfirmacao" placeholder="Confirme o Email" class="text-input" />
        </div>

        <div class="form-group">
            <InputText id="Senha" @bind-Value="usuarioAdicionarRequest.Senha" placeholder="Senha" type="password" class="text-input" />
        </div>

        <div class="form-group">
            <InputText id="SenhaConfirmacao" @bind-Value="usuarioAdicionarRequest.SenhaConfirmacao" placeholder="Confirme a senha" type="password" class="text-input" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn-publicar" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="visually-hidden">Loading...</span>
                }
                else
                {
                    <span>Criar conta</span>
                }
            </button>
        </div>

        <p style="color: black;">Já tem uma conta? <a href="/" style="color: #3685cd; text-decoration: none;">Logar</a></p>
    </EditForm>
</div>

<RadzenNotification />

<style>
    .text-input {
        width: 80%;
        border: none;
        border-radius: 2rem;
        height: 2rem;
        padding: 1.5rem;
        margin: 2rem auto;
        display: block;
        outline: none;
        background-color: #e8e8e8;
    }

    .align {
        text-align: center;
        background-color: #FFFFFF;
        width: 100%;
        position: relative;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .btn-publicar {
        display: block;
        width: 80%;
        margin: 1rem auto;
        padding: 0.75rem;
        border: none;
        border-radius: 2rem;
        background-color: #3685cd;
        color: white;
        font-weight: bold;
        font-size: 1rem;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s;
        z-index: 10;
        position: relative;
        margin-top: 3rem;
    }

        .btn-publicar:hover {
            background-color: #0056b3;
        }
</style>

@code {
    public bool isLoading = false;
    public UsuarioAdicionarRequest usuarioAdicionarRequest = new UsuarioAdicionarRequest();

    private string emailRegex = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";  // Certifique-se de que não está vazio ou nulo

    protected override void OnInitialized()
    {
        PageTitleService.SetPageTitle("CRIE SUA CONTA");
        BackgroundColorService.SetBackgroundColor("#FFFFFF");
    }

    public async Task AdicionarUsuario()
    {
        // Validação de campos vazios
        if (string.IsNullOrEmpty(usuarioAdicionarRequest.Nome) ||
            string.IsNullOrEmpty(usuarioAdicionarRequest.EmailLogin) ||
            string.IsNullOrEmpty(usuarioAdicionarRequest.EmailLoginConfirmacao) ||
            string.IsNullOrEmpty(usuarioAdicionarRequest.Senha) ||
            string.IsNullOrEmpty(usuarioAdicionarRequest.SenhaConfirmacao))
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = "Por favor, preencha todos os campos.",
                    Duration = 4000
                });
            return;
        }

        // Validação de e-mail
        if (!string.IsNullOrEmpty(usuarioAdicionarRequest.EmailLogin) && !Regex.IsMatch(usuarioAdicionarRequest.EmailLogin, emailRegex))
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = "O e-mail fornecido não é válido.",
                    Duration = 4000
                });
            return;
        }

        // Validação de e-mail de confirmação
        if (usuarioAdicionarRequest.EmailLogin != usuarioAdicionarRequest.EmailLoginConfirmacao)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = "Os e-mails precisam ser iguais.",
                    Duration = 4000
                });
            return;
        }

        // Validação de senha
        if (usuarioAdicionarRequest.Senha != usuarioAdicionarRequest.SenhaConfirmacao)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = "As senhas precisam ser iguais.",
                    Duration = 4000
                });
            return;
        }

        // Validação do comprimento da senha
        if (usuarioAdicionarRequest.Senha.Length < 6)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = "A senha deve ter pelo menos 6 caracteres.",
                    Duration = 4000
                });
            return;
        }

        isLoading = true;

        var response = await HttpClient.PostAsJsonAsync("usuario/adicionar", usuarioAdicionarRequest);
        if (response.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Sucesso",
                    Detail = "Seu usuário foi criado com sucesso",
                    Duration = 4000
                });

            NavigationManager.NavigateTo("/");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = errorContent,
                    Duration = 4000
                });
        }

        isLoading = false;
    }
}

